# Simple GitLab CI/CD Pipeline for Dynamic KPI Dashboard
# Python project with MongoDB data generation and SonarQube quality analysis

stages:
  - validate
  - quality
  - build

variables:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip/

# üîç Validate Python Code
validate:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - echo "üîç Validating Python syntax..."
    - python -m py_compile src/main/main.py
    - python -m py_compile src/test/test_superset.py
    - echo "‚úÖ Python syntax validation passed"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# üìä SonarQube Code Quality
sonarqube:
  stage: quality
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "üìä Running SonarQube code quality analysis..."
    - sonar-scanner
      -Dsonar.projectKey=dynamic-kpi-dashboard
      -Dsonar.sources=src/
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.token=$SONAR_TOKEN
      -Dsonar.python.version=3.11
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# üê≥ Docker Build
docker_build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "üê≥ Validating Docker setup..."
    - docker --version
    - docker-compose --version
    - echo "‚úÖ Docker build validation completed"
    - echo "Ready for deployment!"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual